paths:
  /products:
    get:
      tags:
        - Product
      summary: "Retrieve paginated list of products"
      description: "Fetches products with pagination, including details about authors and categories."
      parameters:
        - name: page
          in: query
          required: false
          description: "Page number for pagination. Defaults to 1."
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: "Number of products to return per page. Defaults to 10."
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: sort
          in: query
          required: false
          description: "Sorting criteria for the products. Use field names with optional '-' for descending order."
          schema:
            type: string
            enum: ["createdAt", "-createdAt", "updatedAt", "-updatedAt"]
            default: "-createdAt"
      responses:
        "200":
          description: "A list of products retrieved successfully."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "404":
          description: "No products found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    post:
      tags:
        - Product
      summary: "Create a new product"
      description: "Adds a new product to the inventory, associated with the authenticated user."
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput" # Reference to the product input schema
      responses:
        "201":
          description: "Product created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product" # Reference to the product schema
        "400":
          description: "Bad request due to invalid product data."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: "Unauthorized access due to missing or invalid token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /products/{productId}:
    get:
      tags:
        - Product
      summary: "Get a product by ID"
      description: "Retrieves a product's details by its ID, including author and categories."
      parameters:
        - name: productId
          in: path
          required: true
          description: "The ID of the product to retrieve."
          schema:
            type: string
      # Or appropriate format depending on your ID structure
      responses:
        "200":
          description: "A product object with detailed information."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetail"
        "404":
          description: "Product not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      security:
        - cookieAuth: []
      tags:
        - Product
      summary: "Delete a product by its ID"
      description: "Deletes a specific product using its ID."
      parameters:
        - name: productId
          in: path
          required: true
          description: "The ID of the product to delete."
          schema:
            type: string
      # Or appropriate format depending on your ID structure
      responses:
        "204":
          description: "Product deleted successfully."
        "404":
          description: "Product not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: "Unauthorized access due to missing or invalid token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: "User not authorized to delete this product."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      security:
        - cookieAuth: []
      tags:
        - Product
      summary: "Update a product by its ID"
      description: "Updates the details of a specific product using its ID."
      parameters:
        - name: productId
          in: path
          required: true
          description: "The ID of the product to update."
          schema:
            type: string
      # Or appropriate format depending on your ID structure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput" # Reference to the product input schema
      responses:
        "200":
          description: "Product updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product" # Reference to the product schema
        "401":
          description: "Unauthorized access due to missing or invalid token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "Product not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "403":
          description: "Forbidden due to lack of permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "400":
          description: "Invalid request data."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /products/author/{userId}:
    get:
      tags:
        - Product
      summary: "Get products by author with pagination"
      description: "Retrieves a list of products created by a specific author, paginated."
      parameters:
        - name: userId
          in: path
          required: true
          description: "The ID of the author whose products to retrieve."
          schema:
            type: string
        # Or appropriate format depending on your ID structure
        - name: page
          in: query
          required: false
          description: "The page number to retrieve."
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: "The number of categories to return per page."
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: sort
          in: query
          required: false
          description: "The field by which to sort categories."
          schema:
            type: string
            enum:
              - createdAt
              - -createdAt
              - updatedAt
              - -updatedAt
            default: "-createdAt"
      responses:
        "200":
          description: "A list of products by the specified author."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "404":
          description: "No products found for the specified author."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /products/category/{categoryId}:
    get:
      tags:
        - Product
      summary: "Get products by category with pagination"
      description: "Retrieves products that belong to a specific category, with pagination support."
      parameters:
        - name: categoryId
          in: path
          required: true
          description: "The ID of the category to filter products by."
          schema:
            type: string
        # Or appropriate format depending on your ID structure
        - name: page
          in: query
          required: false
          description: "The page number to retrieve."
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: "The number of categories to return per page."
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: sort
          in: query
          required: false
          description: "The field by which to sort categories."
          schema:
            type: string
            enum:
              - createdAt
              - -createdAt
              - updatedAt
              - -updatedAt
            default: "-createdAt"
      responses:
        "200":
          description: "A paginated list of products belonging to the specified category."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "404":
          description: "No products found for the specified category."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "Internal server error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
